version: "3.8"

services: 
  server:
    image: 'nginx:stable-alpine'
    ports: 
      - '8000:80'
    volumes: 
      - ./src:/var/www/html # bind mount to allow server to access information and db translations from php
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # eventually get merged into master config folder in nginx
    depends_on: # docker compose will make sure server will include php and mysql. 
      - php
      - mysql
  php: # can reference dockerfile
    build: 
      context: ./dockerfiles
      dockerfile: php.dockerfile
    #this php interpretor needs to be able to read and access source code through /var/www/html. This will require a bind mount. 
    # default, the dockerfile is static once built and will not be altered. We must include --build to compose up so the images will be rebuilt on changes. Otherwise it will reuse cached layers. 
    volumes:
      - ./src:/var/www/html:delegated # delegated, performance improvement. If something is writted here, it is not automatically added to host machine - will process in batches. Not everything needs to be added immediately. 
      # read only not an option since some information will be written and required to be accessible.  
    # ports:
        # the PORT where "it listens for work" is established in the nginx.conf file, "fastcgi_pass". This refers directly to the name of the container. 
      # - "9000:3000" # 9000 comes from official documentation - but is not required since php and nginx are connected through network. Just update the fastcgi_pass to default port. 
  mysql:
    image: mysql:5.7 # will start a mysql db 
    env_file:
      # env used to set up db - see official docs in README.md. The variables used there are determined by laravel. 
      - ./env/mysql.env
  composer:
    # util container. Used by laravel, but used by us to set up .
    build: 
      context: ./dockerfiles
      dockerfile: composer.dockerfile 
    #expose source code directory. It does it within the source folder. 
    volumes:
      - ./src:/var/www/html # mirrored back to this folder. 
  artisan: # run laravel commands
    build: # can use the php dockerfile since it requires php to run code.   
      context: ./dockerfiles
      dockerfile: php.dockerfile
    volumes:
      - ./src:/var/www/html
      # can set specific that may be required for docker-compose inside of this file to override the dockerfile
    entrypoint: ["php", "/var/www/html/artisan"] # add entrypoint  > path see src/artisan 
  npm:
    image: node:14 
    # this is another override like entrypoint above
    working_dir: /var/www/html
    entrypoint: ["npm"]
    volumes:
      - ./src:/var/www/html